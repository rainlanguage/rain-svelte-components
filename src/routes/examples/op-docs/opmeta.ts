export const testOpmeta = [{ "desc": "Decode a slice of bits out of a 256 bit value (anything on the stack).", "name": "decode-256", "inputs": { "parameters": [{ "name": "source" }] }, "aliases": ["slice-256"], "operand": [{ "bits": [8, 15], "desc": "Bit index to start reading from.", "name": "start" }, { "bits": [0, 7], "desc": "Number of bits to read from start.", "name": "length" }], "outputs": 1 }, { "desc": "Encode some truncated bits from a 256 bit value (anything on the stack) into a new 256 bit value.", "name": "encode-256", "inputs": { "parameters": [{ "name": "source" }, { "name": "target" }] }, "aliases": ["copy-slice-256"], "operand": [{ "bits": [8, 15], "desc": "Bit index to start reading from.", "name": "start" }, { "bits": [0, 7], "desc": "Number of bits to read from start.", "name": "length" }], "outputs": 1 }, { "desc": "Part an uint256 value into 8 seperate 1 byte size values.", "name": "explode-32", "inputs": { "parameters": [{ "name": "value" }] }, "aliases": ["explode32", "explode"], "operand": 0, "outputs": 8 }, { "desc": "Takes Feed and StaleAfter values from stack and gets the Chainlink Oracle Feed's price and stack the result based on StaleAfter", "name": "chainlink-price", "inputs": { "parameters": [{ "desc": "address of the price feed", "name": "feed" }, { "desc": "duration of time that price will be valid", "name": "stale-after" }] }, "aliases": ["price"], "operand": 0, "outputs": 1 }, { "desc": "Inserts an context cell into the stack by reading column and row from operand", "name": "context", "inputs": 0, "operand": [{ "bits": [8, 15], "name": "column" }, { "bits": [0, 7], "name": "row" }], "outputs": 1 }, { "desc": "Stacks the hash of an entire context column. Useful for snapshotting and later checking a list of user-provided values.", "name": "context-column-hash", "inputs": 0, "operand": [{ "bits": [0, 15], "name": "column" }], "outputs": 1 }, { "desc": "Inserts a context cell into the stack by reading the column from operand and row from stack", "name": "context-row", "inputs": { "parameters": [{ "name": "row" }] }, "operand": [{ "bits": [0, 7], "desc": "context column", "name": "column" }], "outputs": 1 }, { "desc": "Performs a looped call over some inputs and some context rows specified by folding a column as start column index and width in operand arguments as length of items in rows", "name": "fold-context", "inputs": { "bits": [12, 15], "parameters": [{ "name": "input", "spread": true }] }, "aliases": ["fold"], "operand": [{ "bits": [12, 15], "name": "inputs" }, { "bits": [8, 11], "desc": "number of columns to loop over", "name": "width" }, { "bits": [4, 7], "desc": "column to base the loop on", "name": "fold-column" }, { "bits": [0, 3], "desc": "index of the source to run", "name": "source-index" }], "outputs": { "bits": [12, 15] } }, { "desc": "Takes some items from the stack and runs a source with sub-stack and puts the results back to the stack", "name": "call", "inputs": { "bits": [0, 3], "parameters": [{ "name": "input", "spread": true }] }, "aliases": ["function", "fn"], "operand": [{ "bits": [8, 11], "desc": "index of the source to run", "name": "source-index" }, { "bits": [4, 7], "desc": "number of outputs", "name": "output-size" }, { "bits": [0, 3], "name": "inputs" }], "outputs": { "bits": [4, 7] } }, { "desc": "ABI encodes the entire stack and logs it to the hardhat console", "name": "debug", "inputs": 0, "aliases": ["log", "console", "console-log"], "operand": [{ "bits": [0, 0], "desc": "debugging mode", "name": "mode" }], "outputs": 0 }, { "desc": "Runs a while loop on number of items taken from a stack until a conditions is met", "name": "do-while", "inputs": { "bits": [0, 3], "parameters": [{ "name": "input", "spread": true }, { "desc": "condition of while loop", "name": "condition" }], "computation": "bits + 1" }, "aliases": ["while"], "operand": [{ "bits": [8, 11], "desc": "index of the source to run", "name": "source-index" }, { "bits": [0, 3], "name": "inputs", "validRange": [[0, 15]], "computation": "arg - 1" }], "outputs": { "bits": [0, 3] } }, { "desc": "", "name": "extern", "inputs": 0, "operand": 0, "outputs": 0 }, { "desc": "Loop a source n times by taking some items from stack and putting the results back into stack", "name": "loop-n", "inputs": { "bits": [0, 3], "parameters": [{ "name": "input", "spread": true }] }, "aliases": ["loop", "for"], "operand": [{ "bits": [12, 15], "desc": "number of loops", "name": "loop-size" }, { "bits": [8, 11], "desc": "index of the source to run", "name": "source-index" }, { "bits": [4, 7], "desc": "number of outputs", "name": "output-size" }, { "bits": [0, 3], "name": "inputs" }], "outputs": { "bits": [4, 7] } }, { "desc": "Takes an item from constants array or from stack items and insert it into the stack", "name": "read-memory", "inputs": 0, "aliases": ["read"], "operand": [{ "bits": [1, 15], "desc": "index of the item to read", "name": "index" }, { "bits": [0, 0], "desc": "type of the read, from constants or stack", "name": "type" }], "outputs": 1 }, { "desc": "Hash (solidity keccak256) value taken from stack and stack the result", "name": "hash", "inputs": { "bits": [0, 7], "parameters": [{ "name": "input", "spread": true }] }, "operand": [{ "bits": [0, 7], "name": "inputs", "validRange": [[1, 255]] }], "outputs": 1 }, { "desc": "Get the balance of an ERC1155 token of an account and insert it into the stack", "name": "erc-1155-balance-of", "inputs": { "parameters": [{ "name": "token-address" }, { "name": "account" }, { "name": "token-id" }] }, "aliases": ["erc-1155-balance"], "operand": 0, "outputs": 1 }, { "desc": "Get the balances of an ERC1155 token for batches of accounts and token ids and insert it into the stack", "name": "erc-1155-balance-of-batch", "inputs": { "bits": [0, 7], "parameters": [{ "name": "token-address" }, { "name": "account", "spread": true }, { "name": "token-id", "spread": true }], "computation": "(bits * 2) + 1" }, "aliases": ["erc-1155-batch-balance"], "operand": [{ "bits": [0, 7], "name": "inputs", "validRange": [[1, 255]], "computation": "(arg - 1) / 2" }], "outputs": { "bits": [0, 7] } }, { "desc": "Get the balance of an ERC20 token of an account and insert it into the stack", "name": "erc-20-balance-of", "inputs": { "parameters": [{ "name": "token-address" }, { "name": "account" }] }, "aliases": ["erc-20-balance"], "operand": 0, "outputs": 1 }, { "desc": "Get the supply of an ERC20 token and insert it into the stack", "name": "erc-20-total-supply", "inputs": { "parameters": [{ "name": "token-address" }] }, "aliases": ["erc-20-supply"], "operand": 0, "outputs": 1 }, { "desc": "Get the snapshot balance of an ERC20 token of an account and insters it into the stack", "name": "erc-20-snapshot-balance-of-at", "inputs": { "parameters": [{ "name": "token-address" }, { "name": "account" }, { "name": "snapshot-id" }] }, "aliases": ["erc-20-snapshot-balance"], "operand": 0, "outputs": 1 }, { "desc": "Get the snapshot supply of an ERC20 token and insert it into the stack", "name": "erc-20-snapshot-total-supply-at", "inputs": { "parameters": [{ "name": "token-address" }, { "name": "snapshot-id" }] }, "aliases": ["erc-20-snapshot-supply"], "operand": 0, "outputs": 1 }, { "desc": "Stack the owner of an ERC5313 compliant contract.", "name": "erc-5313-owner", "inputs": { "parameters": [{ "name": "contract-address" }] }, "operand": 0, "outputs": 1 }, { "desc": "Get the balance of an ERC721 token of an account and insert it into the stack", "name": "erc-721-balance-of", "inputs": { "parameters": [{ "name": "token-address" }, { "name": "account" }] }, "aliases": ["erc-721-balance"], "operand": 0, "outputs": 1 }, { "desc": "Get the owner of an ERC721 token of an account and insert it into the stack", "name": "erc-721-owner-of", "inputs": { "parameters": [{ "name": "token-address" }, { "name": "token-id" }] }, "aliases": ["erc-721-owner"], "operand": 0, "outputs": 1 }, { "desc": "Require items(s) of the stack to be true, i.e. greater than zero, revert if not", "name": "ensure", "inputs": { "bits": [0, 7], "parameters": [{ "name": "input", "spread": true }] }, "aliases": ["require"], "operand": [{ "bits": [0, 7], "name": "inputs", "validRange": [[1, 255]] }], "outputs": 0 }, { "desc": "Inserts the current block number into the stack", "name": "block-number", "inputs": 0, "aliases": ["current-block"], "operand": 0, "outputs": 1 }, { "desc": "Insert the current block timestamp into the stack", "name": "block-timestamp", "inputs": 0, "aliases": ["now", "current-time", "current-timestamp"], "operand": 0, "outputs": 1 }, { "desc": "Inserts the result of sum of N values taken from the stack into the stack", "name": "add", "inputs": { "bits": [0, 7], "parameters": [{ "name": "input", "spread": true }] }, "aliases": ["sum"], "operand": [{ "bits": [0, 7], "name": "inputs", "validRange": [[2, 255]] }], "outputs": 1 }, { "desc": "Inserts the result of divide of N values taken from the stack into the stack", "name": "div", "inputs": { "bits": [0, 7], "parameters": [{ "name": "input", "spread": true }] }, "aliases": ["divide"], "operand": [{ "bits": [0, 7], "name": "inputs", "validRange": [[2, 255]] }], "outputs": 1 }, { "desc": "Inserts the result of exponention of N values taken from the stack into the stack", "name": "exp", "inputs": { "bits": [0, 7], "parameters": [{ "name": "input", "spread": true }] }, "aliases": ["pow", "power"], "operand": [{ "bits": [0, 7], "name": "inputs", "validRange": [[2, 255]] }], "outputs": 1 }, { "desc": "Inserts the maximum of N values taken from the stack into the stack", "name": "max", "inputs": { "bits": [0, 7], "parameters": [{ "name": "input", "spread": true }] }, "aliases": ["maximum", "max-of"], "operand": [{ "bits": [0, 7], "name": "inputs", "validRange": [[2, 255]] }], "outputs": 1 }, { "desc": "Inserts the minimum of N values taken from the stack into the stack", "name": "min", "inputs": { "bits": [0, 7], "parameters": [{ "name": "input", "spread": true }] }, "aliases": ["minimum", "min-of"], "operand": [{ "bits": [0, 7], "name": "inputs", "validRange": [[2, 255]] }], "outputs": 1 }, { "desc": "Inserts the mod of N values taken from the stack into the stack", "name": "mod", "inputs": { "bits": [0, 7], "parameters": [{ "name": "input", "spread": true }] }, "operand": [{ "bits": [0, 7], "name": "inputs", "validRange": [[2, 255]] }], "outputs": 1 }, { "desc": "Inserts the multiplication of N values taken from the stack into the stack", "name": "mul", "inputs": { "bits": [0, 7], "parameters": [{ "name": "input", "spread": true }] }, "operand": [{ "bits": [0, 7], "name": "inputs", "validRange": [[2, 255]] }], "outputs": 1 }, { "desc": "Inserts the subtraction of N values taken from the stack into the stack", "name": "sub", "inputs": { "bits": [0, 7], "parameters": [{ "name": "input", "spread": true }] }, "aliases": ["minus"], "operand": [{ "bits": [0, 7], "name": "inputs", "validRange": [[2, 255]] }], "outputs": 1 }, { "desc": "Rescale a fixed point number of N decimals to 18 decimals where N is in the operand.", "name": "scale-18", "inputs": { "parameters": [{ "name": "value" }] }, "aliases": ["scale18"], "operand": [{ "bits": [1, 15], "desc": "Decimals of the value being rescaled.", "name": "decimals", "validRange": [[0, 77]] }, { "bits": [0, 0], "desc": "Direction to round truncation errors when scaling down. 0 = Down, 1 = Up.", "name": "rounding", "validRange": [[0, 1]] }], "outputs": 1 }, { "desc": "Inserts the result of dividing the 2 items of the stack by keeping the 18 fixed point decimals into the stack", "name": "scale-18-div", "inputs": { "parameters": [{ "desc": "The first value", "name": "value1" }, { "desc": "The second value", "name": "value2" }] }, "aliases": ["scale18-div", "fp-div"], "operand": [{ "bits": [0, 7], "desc": "decimals of the first value", "name": "decimals", "validRange": [[0, 255]] }], "outputs": 1 }, { "desc": "Rescale a fixed point number of N decimals to 18 decimals where N is taken from the stack.", "name": "scale-18-dynamic", "inputs": { "parameters": [{ "name": "current-decimals" }, { "name": "value" }] }, "aliases": ["scale18-dynamic", "fp-dynamic"], "operand": [{ "bits": [0, 0], "desc": "Direction to round truncation errors when scaling down. 0 = Down, 1 = Up.", "name": "rounding", "validRange": [[0, 1]] }], "outputs": 1 }, { "desc": "Inserts the result of multiplying the 2 items of the stack by keeping the 18 fixed point decimals into the stack", "name": "scale-18-mul", "inputs": { "parameters": [{ "desc": "The first value", "name": "value1" }, { "desc": "The second value", "name": "value2" }] }, "aliases": ["scale18-mul", "fp-mul"], "operand": [{ "bits": [0, 7], "desc": "decimals of the first value", "name": "decimals", "validRange": [[0, 255]] }], "outputs": 1 }, { "desc": "Scale a fixed point up or down by operand.", "name": "scale-by", "inputs": { "parameters": [{ "desc": "The value to scale by", "name": "value" }] }, "operand": [{ "bits": [0, 7], "desc": "determines the up/down scale as 2s complement", "name": "scale" }], "outputs": 1 }, { "desc": "Rescale an 18 OOMs fixed point number to scale N.", "name": "scale-n", "inputs": { "parameters": [{ "desc": "The value to scale to N", "name": "value" }] }, "operand": [{ "bits": [0, 7], "desc": "the target decimals to scale to", "name": "target-decimals", "validRange": [[1, 255]] }], "outputs": 1 }, { "desc": "Inserts the first non-zero value of all the values it checks if there exists one, else inserts zero into the stack.", "name": "any", "inputs": { "bits": [0, 7], "parameters": [{ "name": "input", "spread": true }] }, "aliases": ["or"], "operand": [{ "bits": [0, 7], "name": "inputs", "validRange": [[2, 255]] }], "outputs": 1 }, { "desc": "Takes 3 items from the stack and check if the first item is non-zero the inserts the second item into the stack, else inserts the 3rd item", "name": "eager-if", "inputs": { "parameters": [{ "desc": "The condition to evaluate", "name": "condition" }, { "desc": "The value to stack if the condition is non-zero/true", "name": "pass-statement" }, { "desc": "The value to stack if the condition is zero/false", "name": "fail-statement" }] }, "aliases": ["if"], "operand": 0, "outputs": 1 }, { "desc": "Compares the last 2 items of the stack together and inserts true/1 into stack if they are euqal, else inserts false/0", "name": "equal-to", "inputs": { "parameters": [{ "name": "value1" }, { "name": "value2" }] }, "aliases": ["eq"], "operand": 0, "outputs": 1 }, { "desc": "Inserts the first value of all the values it checks if all of them are non-zero, else inserts zero into the stack.", "name": "every", "inputs": { "bits": [0, 7], "parameters": [{ "name": "input", "spread": true }] }, "aliases": ["and"], "operand": [{ "bits": [0, 7], "name": "inputs", "validRange": [[2, 255]] }], "outputs": 1 }, { "desc": "Takes last 2 values from stack and puts true/1 into the stack if the first value is greater than the second value and false/0 if not.", "name": "greater-than", "inputs": { "parameters": [{ "name": "value1" }, { "name": "value2" }] }, "aliases": ["gt"], "operand": 0, "outputs": 1 }, { "desc": "Checks if the value is zero and inserts true/1 into the stack if it is, else inserts false/0", "name": "is-zero", "inputs": { "parameters": [{ "name": "value" }] }, "aliases": ["is-false", "not"], "operand": 0, "outputs": 1 }, { "desc": "Takes last 2 values from stack and puts true/1 into the stack if the first value is less than the second value and false/0 if not.", "name": "less-than", "inputs": { "parameters": [{ "name": "value1" }, { "name": "value2" }] }, "aliases": ["lt"], "operand": 0, "outputs": 1 }, { "desc": "PRBMath UD60x18: Calculates the arithmetic average of x and y, rounding down.", "name": "prb-ud60x18-avg", "inputs": { "parameters": [{ "name": "x" }, { "name": "y" }] }, "aliases": ["prb-avg", "fp-avg"], "operand": 0, "outputs": 1 }, { "desc": "PRBMath UD60x18: Yields the smallest whole UD60x18 number greater than or equal to x.", "name": "prb-ud60x18-ceil", "inputs": { "parameters": [{ "name": "x" }] }, "aliases": ["prb-ceil", "fp-ceil"], "operand": 0, "outputs": 1 }, { "desc": "PRBMath UD60x18: Divides two UD60x18 numbers, returning a new UD60x18 number. Rounds towards zero.", "name": "prb-ud60x18-div", "inputs": { "parameters": [{ "name": "x" }, { "name": "y" }] }, "aliases": ["prb-div"], "operand": 0, "outputs": 1 }, { "desc": "PRBMath UD60x18: Calculates the natural exponent of x.", "name": "prb-ud60x18-exp", "inputs": { "parameters": [{ "name": "x" }] }, "aliases": ["prb-exp", "fp-exp"], "operand": 0, "outputs": 1 }, { "desc": "PRBMath UD60x18: Calculates the binary exponent of x using the binary fraction method.", "name": "prb-ud60x18-exp2", "inputs": { "parameters": [{ "name": "x" }] }, "aliases": ["prb-exp2", "fp-exp2"], "operand": 0, "outputs": 1 }, { "desc": "PRBMath UD60x18: Yields the greatest whole UD60x18 number less than or equal to x.", "name": "prb-ud60x18-floor", "inputs": { "parameters": [{ "name": "x" }] }, "aliases": ["prb-floor", "fp-floor"], "operand": 0, "outputs": 1 }, { "desc": "PRBMath UD60x18: Yields the excess beyond the floor of x.", "name": "prb-ud60x18-frac", "inputs": { "parameters": [{ "name": "x" }] }, "aliases": ["prb-frac", "fp-frac"], "operand": 0, "outputs": 1 }, { "desc": "PRBMath UD60x18: Calculates the geometric mean of x and y, i.e. $$sqrt(x * y)$$, rounding down.", "name": "prb-ud60x18-gm", "inputs": { "parameters": [{ "name": "x" }, { "name": "y" }] }, "aliases": ["prb-gm", "fp-gm"], "operand": 0, "outputs": 1 }, { "desc": "PRBMath UD60x18: Calculates 1 / x, rounding toward zero.", "name": "prb-ud60x18-inv", "inputs": { "parameters": [{ "name": "x" }] }, "aliases": ["prb-inv", "fp-inv"], "operand": 0, "outputs": 1 }, { "desc": "PRBMath UD60x18: Calculates the natural logarithm of x.", "name": "prb-ud60x18-ln", "inputs": { "parameters": [{ "name": "x" }] }, "aliases": ["prb-ln", "fp-ln"], "operand": 0, "outputs": 1 }, { "desc": "PRBMath UD60x18: Calculates the common logarithm of x.", "name": "prb-ud60x18-log10", "inputs": { "parameters": [{ "name": "x" }] }, "aliases": ["prb-log10", "fp-log10"], "operand": 0, "outputs": 1 }, { "desc": "PRBMath UD60x18: Calculates the binary logarithm of x.", "name": "prb-ud60x18-log2", "inputs": { "parameters": [{ "name": "x" }] }, "aliases": ["prb-log2", "fp-log2"], "operand": 0, "outputs": 1 }, { "desc": "PRBMath UD60x18: Multiplies two UD60x18 numbers together, returning a new UD60x18 number.", "name": "prb-ud60x18-mul", "inputs": { "parameters": [{ "name": "x" }, { "name": "y" }] }, "aliases": ["prb-mul"], "operand": 0, "outputs": 1 }, { "desc": "PRBMath UD60x18: Raises x to the power of y.", "name": "prb-ud60x18-pow", "inputs": { "parameters": [{ "name": "x" }, { "name": "y" }] }, "aliases": ["prb-pow"], "operand": 0, "outputs": 1 }, { "desc": "PRBMath UD60x18: Raises x (an UD60x18 number) to the power y (unsigned basic integer) using the famous algorithm \"exponentiation by squaring\".", "name": "prb-ud60x18-powu", "inputs": { "parameters": [{ "name": "x" }, { "name": "y" }] }, "aliases": ["prb-powu"], "operand": 0, "outputs": 1 }, { "desc": "PRBMath UD60x18: Calculates the square root of x, rounding down.", "name": "prb-ud60x18-sqrt", "inputs": { "parameters": [{ "name": "x" }] }, "aliases": ["prb-sqrt", "fp-sqrt"], "operand": 0, "outputs": 1 }, { "desc": "Inserts sum of the specified items from the stack and if prevernts reverts if the result goes above max 256 bit size", "name": "saturating-add", "inputs": { "bits": [0, 7], "parameters": [{ "name": "input", "spread": true }] }, "aliases": ["sat-add", "saturating-sum", "sat-sum"], "operand": [{ "bits": [0, 7], "name": "inputs", "validRange": [[2, 255]] }], "outputs": 1 }, { "desc": "Inserts multiplied result of the specified items from the stack and if prevernts reverts if the result goes above max 256 bit size", "name": "saturating-mul", "inputs": { "bits": [0, 7], "parameters": [{ "name": "input", "spread": true }] }, "aliases": ["sat-mul"], "operand": [{ "bits": [0, 7], "name": "inputs", "validRange": [[2, 255]] }], "outputs": 1 }, { "desc": "Inserts subtraction of the specified items from the stack and if prevernts reverts if the result goes blow zero", "name": "saturating-sub", "inputs": { "bits": [0, 7], "parameters": [{ "name": "input", "spread": true }] }, "aliases": ["sat-sub"], "operand": [{ "bits": [0, 7], "name": "inputs", "validRange": [[2, 255]] }], "outputs": 1 }, { "desc": "The balance of an orderbook vault", "name": "iorderbook-v1-vault-balance", "inputs": { "parameters": [{ "desc": "The address of the IOrderbookV2", "name": "orderbook-address" }, { "desc": "The address of the Owner of the vault", "name": "owner-address" }, { "desc": "The address of the Token", "name": "token-address" }, { "name": "vault-id" }] }, "aliases": ["vault-balance", "orderbook-vault-balance"], "operand": 0, "outputs": 1 }, { "desc": "The remaining rTKNs left to to be sold", "name": "isale-v2-remaining-token-inventory", "inputs": { "parameters": [{ "name": "isale-address" }] }, "aliases": ["sale-remaining-token-inventory"], "operand": 0, "outputs": 1 }, { "desc": "The reserve token address", "name": "isale-v2-reserve", "inputs": { "parameters": [{ "name": "isale-address" }] }, "aliases": ["sale-reserve"], "operand": 0, "outputs": 1 }, { "desc": "Insert the status of a Sale contract into the stack by taking its address from the stack", "name": "isale-v2-sale-status", "inputs": { "parameters": [{ "name": "isale-address" }] }, "aliases": ["sale-status"], "operand": 0, "outputs": 1 }, { "desc": "The rTKN address", "name": "isale-v2-token", "inputs": { "parameters": [{ "name": "isale-address" }] }, "aliases": ["sale-token"], "operand": 0, "outputs": 1 }, { "desc": "The total amount of reserve tokens received by the sale", "name": "isale-v2-total-reserve-received", "inputs": { "parameters": [{ "name": "isale-address" }] }, "aliases": ["sale-total-reserve-received"], "operand": 0, "outputs": 1 }, { "desc": "Read and put the status of an account from the verify v1 contract into the stack", "name": "iverify-v1-account-status-at-time", "inputs": { "parameters": [{ "name": "iverifyv1-address" }, { "name": "account-address" }] }, "aliases": ["verify-status"], "operand": 0, "outputs": 1 }, { "desc": "Read a key/value pair from contract storage by providing the key and stack the value", "name": "get", "inputs": { "parameters": [{ "desc": "the key of the key/value pair", "name": "key" }] }, "operand": 0, "outputs": 1 }, { "desc": "Write a key/value pair taken from stack and write into contract storage", "name": "set", "inputs": { "parameters": [{ "name": "key" }, { "name": "value" }] }, "aliases": ["write"], "operand": 0, "outputs": 0 }, { "desc": "Inserts the report of an account of a tier contract and optionally contexts which are taken from the stack into the stack", "name": "itier-v2-report", "inputs": { "bits": [0, 7], "parameters": [{ "name": "itier-address" }, { "name": "account" }, { "desc": "The contextual values", "name": "context", "spread": true }], "computation": "bits + 2" }, "aliases": ["tier-report"], "operand": [{ "bits": [0, 7], "name": "inputs", "validRange": [[2], [3], [10]], "computation": "arg - 2" }], "outputs": 1 }, { "desc": "Inserts the specified tier level report of an account of a tier contract and optionally contexts which are taken from the stack into the stack", "name": "itier-v2-report-time-for-tier", "inputs": { "bits": [0, 7], "parameters": [{ "name": "itierv2-address" }, { "name": "account" }, { "name": "tier" }, { "desc": "The contextual values", "name": "context", "spread": true }], "computation": "bits + 3" }, "aliases": ["tier-report-time-for-tier"], "operand": [{ "bits": [0, 7], "name": "inputs", "validRange": [[3], [4], [11]], "computation": "arg - 3" }], "outputs": 1 }, { "desc": "Inserts the saturating difference of 2 reports taken from the stack into the stack and prevents reverts if the result below zero", "name": "saturating-diff", "inputs": { "parameters": [{ "name": "value1" }, { "name": "value2" }] }, "aliases": ["sat-diff"], "operand": 0, "outputs": 1 }, { "desc": "Inserts the result of selecting the less than equal to specified value taken from stack among number of reports by a logic and mode into the stack", "name": "select-lte", "inputs": { "bits": [0, 7], "parameters": [{ "desc": "The timestamp to check the tier reports against", "name": "referrence-timestamp" }, { "desc": "The report to selectLte from", "name": "report", "spread": true }] }, "operand": [{ "bits": [13, 13], "desc": "select lte logic: every or any logic", "name": "logic" }, { "bits": [8, 9], "desc": "select lte mode: min, max or first", "name": "mode", "validRange": [[0, 2]] }, { "bits": [0, 7], "name": "inputs", "validRange": [[1, 255]] }], "outputs": 1 }, { "desc": "Inserts the result of updating the range of tiers of a report taken from stack by a value taken from the stack into the stack", "name": "update-times-for-tier-range", "inputs": { "parameters": [{ "desc": "the timestamp to update tier range to", "name": "update-timestamp" }, { "desc": "the report to update its tier range", "name": "report" }] }, "aliases": ["update-tiers", "update-tier-range"], "operand": [{ "bits": [4, 7], "desc": "the ending tier to update", "name": "end-tier", "validRange": [[0, 8]] }, { "bits": [0, 3], "desc": "the starting tier to update", "name": "start-tier", "validRange": [[0, 8]] }], "outputs": 1 }]